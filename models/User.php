<?php

namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $fio
 * @property string $username
 * @property string $email
 * @property string $password
 * @property string $number
 * @property int $role
 *
 * @property Request[] $requests
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface
{
    public $password_repeat;
    public $check;


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * Finds an identity by the given ID.
     *
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface|null the identity object that matches the given ID.
     */
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * Finds an identity by the given token.
     *
     * @param string $token the token to be looked for
     * @return IdentityInterface|null the identity object that matches the given token.
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null;
    }

    /**
     * @return int|string current user ID
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string|null current user auth key
     */
    public function getAuthKey()
    {
        return null;
    }

    /**
     * @param string $authKey
     * @return bool|null if auth key is valid for current user
     */
    public function validateAuthKey($authKey)
    {
        return false;
    }

    public static function findByUsername($username)
    {
            return User::findOne(['username'=>$username]);
    }

    public function validatePassword($password)
    {
        return $this->password === md5($password);
    }

    public function beforeSave($insert)
    {
        $this->password = md5($this->password);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['fio', 'username', 'email', 'password', 'number'], 'required'],
            ['number','match','pattern'=>'/^(?:\+7|8)\d{10}$/',
               'message'=>'Номер должен начинаться с +7 или с 8' ],
            ['fio','match','pattern'=>'/^[а-яА-Я -]*$/u',
               'message'=>'В фИО доступны только символы керилицы дефисы и пробелы'],
            ['username','match','pattern'=>'/^[a-zA-Z]\w*$/u',
               'message'=>'В логине доступны только символы латиницы' ],
            [['check'],'compare', 'compareValue'=>1,
               'message'=>'Вам надо согласиться на обработку персональных данных'],
            ['password_repeat','compare','compareAttribute'=>'password'],
            [['username'],'unique',
                'message'=>'Пользователь с таким логином уже существует'],
            [['email'],'email'],
            [['role'], 'integer'],
            [['role'], 'default', 'value'=>0],
            [['fio', 'username'], 'string', 'max' => 50],
            [['email', 'password'], 'string', 'max' => 255],
            [['number'], 'string', 'max' => 30],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'fio' => 'Фио',
            'username' => 'Логин',
            'email' => 'Email',
            'password' => 'Пароль',
            'password_repeat'=>'Повторите пароль',
            'number' => 'Номер телефона',
            'check'=>'Подвтердите обработку персональных данных',

        ];
    }

    /**
     * Gets query for [[Requests]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRequests()
    {
        return $this->hasMany(Request::class, ['Id_user' => 'id']);
    }
}
